#----------------------------
# Configuration File
#---------------------------
#

application:
{

    /*
     * This section defines general simulation settings
     */

general:
    {
        starttime           = 0.;             // time t0 at which you start integrating the equations (use t0=0)
        endtime             = .4;             // end time of your simulation
        x_lb                = 0.;             // domain extents: lower boundary for x
        y_lb                = 0.;             // domain extents: lower boundary for y
        x_ub                = 6.283185307179586476;    // domain extents: upper boundary for x
        y_ub                = 6.283185307179586476;    // domain extents: upper boundary for y
        source_type         = "diagonal";              // specify grid type {"diagonal", "parallel"}
        x_cells             = 50;             // number of cells in x-direction
        y_cells             = 50;             // number of cells in y-direction

        num_ghostcells      = 2;              // number of ghostcell layers
        I                   = 1.;             // injection rate
        log_to_file         = true;           // write results to files in log_dir every log_skip_steps
        log_skip_steps      = 30;
        log_dir             = "/tmp";         // dump log-files in this directory
        time_matching       = false;
        log_counter_list    = [];
        log_time_list       = [];             // if you want specific output times, set time_matching to true and add values here
                                              // (seperated by a comma)
        check_mass_conservation     = true;   // shout if mass is not conserved
        max_mass_frac_error         = 0.0;
        log_mass_conservation       = true;
        check_noflow_boundary       = true;
        check_divergence            = true;      // check if div(u) = q
        results_dir                 = "/tmp";  // write all results to this location
        is_test                     = true;      // production run or test
        gnuplot                     = true;      // shows solution in real-time with gnuplot interface
        // in order to use gnuplot you also need log_to_file = true
        levelset                    = false;
        syncmode                    = "sync";    // parallelizaton mode: "sync" (synchronous) or "async" (asynchronous)
    };

    /* This section defines all the settings for the elliptic solver
     *
     */

elliptic:
    {
        eps                         = 1.E-12;
        ell_method                  = "mg";         // the crank-nicolson scheme (para_method = "crank-nicolson")  requires ell_method = "mg" (multigrid)
        bound_type                  = "neumann";    // { dirichlet | neumann | shifted_neumann }
        const_bound_val             = 0.;
        mu_res                      = 1.;           // viscosity of the reservoir fluid (arbitrary units)
        mu_inj                      = 1.;           // viscosity of the injected fluid
        average_procedure           = "mean_concentration";   // average procedure: string :  {"harmonic","mean_concentration"}
    };

wells:
    {
        well_rc                     =  0.05;        // ratio of the domain size
        well_profile                = "circle";     // { "one_cell", "circle", "gauss",...}
        mode                        = "constant";
        q_rand_max                  = 0.001;
        q_high_multiple             = 50.;
        front_const_width           = 3;
        front_rand_width            = 1;
        well_width                  = 0.05;
        q_freq                      = 20.;
    };


parabolic:
    {
        // IMPORTANT: "explicit" is implemented and was used previously, but is depreceated
        // and might not work properly anymore, since the code was growing and some
        // components/the splitting might require a second-order or A-stable method.
        // Therefore, the system will most likely blow up unless more severe time-step restrictions are imposed.
        // USE: para_method = "crank-nicolson"
        para_method                  = "crank-nicolson";    // string: {crank-nicolson, explicit}
        eps                          = 1.E-14;        // stop once the residuarl is smaller than eps
    };


hyperbolic:
    {
        inj_fluid_conc         = 1.;
        hyper_method           = "muscl";      // string: {upwind_split | waf | waf_split | muscl | ctu }
        dimensional_splitting  = "parallel";   // string: {parallel | strang | alternating_sweeps | x_sweep_first | y_sweep_first}
        cfl                    = 0.5;          // CFL-number
        dt_diff_limiter        = 0.9;          // take cfl*100 percent of the calculated maximum timestep for the parabolic equation
        porosity               = 1.;
        time_integration       = "fe";         // DEPRECATED
        ti_eps                 = 1.E-15;       // DEPRECATED
        nu                     = 1.;
        diffusion              = true;         // use diffusion/dispersion
        alpha_t                = 1.;           // transverse magnitude
        alpha_l                = 1.;           // longitudinal magnitude
    };


/* This entire section is deprecated. */

levelset:
    {
        ls_num_ghostcells      = 3;            // USE 3 for WENO5
        ls_flagged_diff        = false;        // use levelset based flagging
        ls_mod_diff            = false;        // use levelset base diffusion/dispersion modulation
        ls_flag_neigh          = 4;            // alternatively you can flag a range of neighbouring cells
        ls_iter                = 10;           // iterations for fast sweeping
        sigma0                 = 0.;           // interface contour
        sigma1                 = -4.;          // two more contours that define the region to be diffusion-modulated
        sigma2                 = 4.;

    };

// NOTE: Multigrid-solver was tested separately and elliptic tests for the MG are not implemented!
// (If you choose is_test = true, ell_method = "mg" and component = "elliptic", the program will crash!)
test:
    {
        component         = "elliptic";
        testno            = 4;
        initial_x_cells   = 20;
        initial_y_cells   = 30;
        profile           = "tophat";          // string: { tophat | sine | gaussbell }
        hyp_norm          = 2;
        levels            = 6;
        num_result_file   = "/tmp/ell_test2.out";
        ex_result_file    = "/tmp/ell_exact2.out";
        norm_file         = "/tmp/Elliptic_1e-10_test4_L2_nu_0.66.out";
        num_u_file        = "/tmp/ell_vel2_u.out";
        num_v_file        = "/tmp/ell_vel2_v.out";
        ex_u_file         = "/tmp/ell_exact2_u.out";
        ex_v_file         = "/tmp/ell_exact2_v.out";
    };
};

### eof
