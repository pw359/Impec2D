#---------------------------
# Configuration File
#---------------------------
#

application:
{

    /*
     * This section defines general simulation settings.
     */

general:
    {
        starttime           = 0.;                  // time t0 at which you start integrating the equations (use t0=0)
        endtime             = .4;                  // end time of your simulation
        x_lb                = 0.;                  // domain extents: lower boundary for x
        y_lb                = 0.;                  // domain extents: lower boundary for y
        x_ub                = 1.41421356237;       // domain extents: upper boundary for x
        y_ub                = 1.41421356237;       // domain extents: upper boundary for y
        source_type         = "parallel";          // specify grid type {"diagonal", "parallel"}
        x_cells             = 141;                 // number of cells in x-direction
        y_cells             = 141;                 // number of cells in y-direction
        num_ghostcells      = 2;                   // number of ghostcell layers
        I                   = 1.;                  // injection rate
        log_to_file         = true;                // write results to files in log_dir every log_skip_steps
        log_skip_steps      = 30;
        log_dir             = "/tmp";              // dump log-files in this directory
        time_matching       = false;
        log_counter_list    = [];
        log_time_list       = [];                  // if you want specific output times, set time_matching to true and add values here
                                                   // (seperated by a comma)
        check_mass_conservation     = true;        // shout if mass is not conserved
        max_mass_frac_error         = 0.0;
        log_mass_conservation       = true;
        check_noflow_boundary       = true;
        check_divergence            = true;        // check if div(u) = q
        results_dir                 = "/tmp";      // write all results to this directory
        is_test                     = false;       // production run or test
        gnuplot                     = true;        // show solution in real-time with gnuplot interface
                                                   // in order to use gnuplot you also need log_to_file = true
        levelset                    = false;       // DEPRECATED: set it to false
        syncmode                    = "sync";      // DEPRECATED: set it to "sync"
    };

    /* This section defines all the settings for the elliptic solver
     *
     */

elliptic:
    {
        eps                  = 1.E-14;
        ell_method           = "mg";             // the crank-nicolson scheme (para_method = "crank-nicolson")  requires ell_method = "mg" (multigrid)
        bound_type           = "neumann";        // { dirichlet | neumann | shifted_neumann }
        const_bound_val      = 0.;               // DEPRECATED: set it to 0
        mu_res               = 41.;              // viscosity of the reservoir fluid (arbitrary units)
        mu_inj               = 1.;               // viscosity of the injected fluid
        average_procedure    = "harmonic";       // average procedure: string :  {"harmonic","mean_concentration"}

    };

wells:
    {
        well_rc              = 0.05;             // ratio of the domain size
        well_profile         = "circle";         // { "one_cell", "circle", "gauss",...}
        // only for source_type = "horizontal"
        mode                 = "constant";       // {"pulsing", "linear", "constant"}
        q_rand_max           = 0.001;
        q_high_multiple      = 50.;
        front_const_width    = 3;
        front_rand_width     = 1;
        well_width           = 0.05;
        // only pulsing
        q_freq               = 20.;
    };


parabolic:
    {
        para_method          = "crank-nicolson";    // string: {crank-nicolson}
        eps                  = 1.E-14;              // stop once the residuarl is smaller than eps
    };


hyperbolic:
    {

        inj_fluid_conc               = 1.;
        hyper_method                 = "muscl";          // string: {muscl}
        dimensional_splitting        = "parallel";       // string: {parallel | strang | alternating_sweeps | x_sweep_first | y_sweep_first}
        cfl                          = 0.5;              // CFL-number
        dt_diff_limiter              = 0.9;              // DEPRECATED
        porosity                     = 1.;
        time_integration             = "tr";             // DEPRECATED
        ti_eps                       = 1.E-15;           // DEPRECATED
        // weighting between parallel stencil and diagonal stencil (should be in general section)
        nu                           = .66666666666666666666666666666667;
        diffusion                    = true;             // use diffusion/dispersion
        alpha_t                      = 1.;               // transverse magnitude
        alpha_l                      = 1.;               // longitudinal magnitude
    };

    /*** All options in this section are DEPRECATED ***/

levelset:
    {
        ls_num_ghostcells            = 3;                // USE 3 for WENO5
        ls_flagged_diff              = false;            // use levelset based flagging
        ls_mod_diff                  = false;            // use levelset base diffusion/dispersion modulation
        ls_flag_neigh                = 4;                // alternatively you can flag a range of neighbouring cells
        ls_iter                      = 10;               // iterations for fast sweeping
        sigma0                       = 0.;               // interface contour
        sigma1                       = -4.;              // two more contours that define the region to be diffusion-modulated
        sigma2                       = 4.;
    };

    /*** ONLY IMPORTANT IF is_test = true ***/
test:
    {
        profile                      = "horizontal_sine";    // profile for advection test, string: { tophat | sine | gaussbell | horizontal_sine }
        hyp_norm                     = 1;                    // norm to be taken for advection test
        testno                       = 1;                    // test number
        component                    = "elliptic";           // component to be tested
    };

};

### eof
