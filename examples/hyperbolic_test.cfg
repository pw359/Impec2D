#----------------------------
# Configuration File
#---------------------------
#

application:
{

    /*
     * This section defines general simulation settings
     */

general:
    {
        starttime           = 0.;          // time t0 at which you start integrating the equations (use t0=0)
        endtime             = 1.;          // end time of your simulation
        x_lb                = 0.;          // domain extents: lower boundary for x
        y_lb                = 0.;          // domain extents: lower boundary for y
        x_ub                = 1.;          // domain extents: upper boundary for x
        y_ub                = 1.;          // domain extents: upper boundary for y
        source_type         = "diagonal";  // specify grid type {"diagonal", "parallel"}
        x_cells             = 80;          // number of cells in x-direction
        y_cells             = 40;          // number of cells in y-direction

        num_ghostcells      = 2;           // number of ghostcell layers
        I                   = 1.;          // injection rate
        log_to_file         = true;        // write results to files in log_dir every log_skip_steps
        log_skip_steps      = 100;
        log_dir             = "/tmp";      // dump log-files in this directory
        time_matching       = false;
        log_counter_list    = [];
        log_time_list       = [];          // if you want specific output times, set time_matching to true and add values here

        // (seperated by a comma)
        check_mass_conservation     = false;    // shout if mass is not conserved
        max_mass_frac_error         = 0.0;
        log_mass_conservation       = false;
        check_noflow_boundary       = false;
        check_divergence            = false;      // check if div(u) = q
        results_dir                 = "/tmp";     // write all results to this location
        is_test                     = true;       // production run or test
        gnuplot                     = true;       // shows solution in real-time with gnuplot interface

        // in order to use gnuplot you also need log_to_file = true
        levelset                    = false;
        syncmode                    = "sync";     // parallelizaton mode: "sync" (synchronous) or "async" (asynchronous)
    };

    /* This section defines all the settings for the elliptic solver
     *
     */

elliptic:
    {
        eps                         = 1.E-14;
        ell_method                  = "mg";         // the crank-nicolson scheme (para_method = "crank-nicolson")  requires ell_method = "mg" (multigrid)
        bound_type                  = "neumann";    // { dirichlet | neumann | shifted_neumann }
        const_bound_val             = 0.;
        mu_res                      = 41.;          // viscosity of the reservoir fluid (arbitrary units)
        mu_inj                      = 1.;           // viscosity of the injected fluid
        average_procedure           = "harmonic";   // average procedure: string :  {"harmonic","mean_concentration"}

    };

wells:
    {
        well_rc                     =  0.05;        // ratio of the domain size
        well_profile                = "circle";     // { "one_cell", "circle", "gauss",...}
        mode                        = "constant";
        q_rand_max                  = 0.001;
        q_high_multiple             = 50.;
        front_const_width           = 3;
        front_rand_width            = 1;
        well_width                  = 0.05;
        q_freq                      = 20.;
    };

parabolic:
    {

        // IMPORTANT: "explicit" is implemented and was used previously, but is depreceated
        // and might not work properly anymore, since the code was growing and some
        // components/the splitting might require a second-order or A-stable method.
        // Therefore the system will most likely blow up unless more severe time-step restrictions are imposed.
        // USE: para_method = "crank-nicolson"

        para_method                  = "crank-nicolson";    // string: {crank-nicolson, explicit}
        eps                          = 1.E-14;        // stop once the residuarl is smaller than eps
    };

hyperbolic:
    {
        inj_fluid_conc               = 1.;
        hyper_method                 = "muscl";       // string: {upwind_split | waf | waf_split | muscl | ctu }
        dimensional_splitting        = "parallel";    // string: {parallel | strang | alternating_sweeps | x_sweep_first | y_sweep_first}
        cfl                          = 0.95;          // CFL-number
        dt_diff_limiter              = 0.9;           // take cfl*100 percent of the calculated maximum timestep for the parabolic equation
        porosity                     = 1.;
        time_integration             = "fe";          // NOT IN USE ANYMORE: always takes tr
        ti_eps                       = 1.E-15;        // NOT IN USE ANYMORE
        // weighting between parallel stencil and diagonal stencil (should be in general section)
        nu                           = .66666666666666666666666666666667;
        diffusion                    = false;         // use diffusion/dispersion
        alpha_t                      = 1.;            // transverse magnitude
        alpha_l                      = 1.;            // longitudinal magnitude
    };


/* This entire section is deprecated. */

levelset:
    {
        ls_num_ghostcells    = 3;       // USE 3 for WENO5
        ls_flagged_diff      = false;   // use levelset based flagging
        ls_mod_diff          = false;   // use levelset base diffusion/dispersion modulation
        ls_flag_neigh        = 4;       // alternatively you can flag a range of neighbouring cells
        ls_iter              = 10;      // iterations for fast sweeping
        sigma0               = 0.;      // interface contour
        sigma1               = -4.;     // two more contours that define the region to be diffusion-modulated
        sigma2               = 4.;
    };

// The hyperbolic test also requires the option ell_method = "cg" (although it does not use
// the elliptic solver!).

test:
    {

        /** CONVERGENCE RATES:
        *
        *    sine - profile , y-advection
        *    MUSCL:  L1, SUPERBEE, CFL 0.95:         1.95971
        *            L1, MINBEE, CFL 0.95            1.66794
        *            L1, LEERBEE, CFL 0.95           1.87621
        *
        *    WAF:    L1, LEERBEE, CFL 0.95           2.00924
        *            L1, SUPERBEE, CFL 0.95          1.93304
        *            L1, MINBEE, CFL 0.95            1.87621
        *    CTU:    L1, 2nd order, CFL 0.95         2.00125
        *
        * sine - profile, diag-advection
        *
        */

        // Altough the solver allows for dx != dy, it is assumed that they are equal (for plotting)
        testno                  = 1;
        profile                 = "sine";    // string: { tophat | sine | gaussbell | horizontal_sine}
        hyp_norm                = 1;
        initial_x_cells         = 50;
        initial_y_cells         = 50;
        levels                  = 4;
        component               = "hyperbolic";
        num_result_file         = "/tmp/hyp_test1.out";
        ex_result_file          = "/tmp/hyp_exact1.out";
        norm_file               = "/tmp/Hyper_parallel_CFL0.9_norm_muscl.out";

        /* not in use at the moment */
        num_u_file              = "/tmp/hyp_vel1_u.out";
        num_v_file              = "/tmp/hyp_vel1_v.out";
        ex_u_file               = "/tmp/hyp_exact1_u.out";
        ex_v_file               = "/tmp/hyp_exact1_v.out";
    };
};

### eof
